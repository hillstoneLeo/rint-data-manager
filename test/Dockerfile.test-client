# Custom Dockerfile for test client that extends the base client
FROM python:3.13-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    sudo \
    openssh-server \
    build-essential \
    libgit2-dev \
    libffi-dev \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy uv binary from build context (assuming it exists in parent context)
COPY ../data/uv /usr/local/bin/uv
RUN chmod +x /usr/local/bin/uv

# Add uv to PATH
ENV PATH="/usr/local/bin:$PATH"

# Install DVC, data generation dependencies, and git
RUN uv pip install --system dvc[all] pandas numpy faker && \
    git config --system init.defaultBranch master

# Copy DVC hooks to git templates directory for automatic installation
COPY ../collect-metadata/post-commit /usr/share/git-core/templates/hooks/post-commit
COPY ../collect-metadata/pre-push /usr/share/git-core/templates/hooks/pre-push

# Fix server URLs in template files for container environment (will be updated later)
RUN sed -i 's|http://localhost:8383|http://server:8383|g' /usr/share/git-core/templates/hooks/post-commit && \
    sed -i 's|http://localhost:8383|http://server:8383|g' /usr/share/git-core/templates/hooks/pre-push && \
    sed -i 's|curl -X POST "$SERVER_URL"|env NO_PROXY="*" curl -X POST "$SERVER_URL"|g' /usr/share/git-core/templates/hooks/post-commit && \
    sed -i 's|curl -X POST "$SERVER_URL"|env NO_PROXY="*" curl -X POST "$SERVER_URL"|g' /usr/share/git-core/templates/hooks/pre-push

# Make scripts executable
RUN chmod +x /usr/share/git-core/templates/hooks/post-commit && \
    chmod +x /usr/share/git-core/templates/hooks/pre-push

# Create enhanced user setup script that handles test_client
RUN cat > /usr/local/bin/setup-users-enhanced << 'ENHANCED_EOF'
#!/bin/bash
# Enhanced setup users script that handles test_client case

set -e

# Function to print timestamped messages
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*"
}

# Create users with home directories and sudo access
create_user() {
    local username=$1
    local password=$2
    
    if ! id "$username" &>/dev/null; then
        useradd -m -s /bin/bash "$username"
        echo "$username:$password" | chpasswd
        usermod -aG sudo "$username"

        # Setup git config for user
        sudo -u "$username" git config --global user.name "$username"
        sudo -u "$username" git config --global user.email "$username@hillstonenet.com"
        sudo -u "$username" git config --global init.defaultBranch master
        
        log "User $username created successfully"
    else
        log "User $username already exists, ensuring git config is set..."
        # Ensure git config is set even for existing users
        sudo -u "$username" git config --global user.name "$username" || true
        sudo -u "$username" git config --global user.email "$username@hillstonenet.com" || true
        sudo -u "$username" git config --global init.defaultBranch master || true
    fi
}

# Container A: alice and bob
if [ "$CONTAINER_NAME" = "client_a" ]; then
    create_user "alice" "alice123"
    create_user "bob" "bob123"
fi

# Container B: cindy
if [ "$CONTAINER_NAME" = "client_b" ]; then
    create_user "cindy" "cindy123"
fi

# Test Client: alice and bob (for development testing)
if [ "$CONTAINER_NAME" = "test_client" ]; then
    log "Setting up users for test_client container..."
    create_user "alice" "alice123"
    create_user "bob" "bob123"
fi

log "User setup completed for CONTAINER_NAME=$CONTAINER_NAME"
ENHANCED_EOF

RUN chmod +x /usr/local/bin/setup-users-enhanced

# Create UV project setup script (same as original)
RUN cat > /usr/local/bin/setup-uv-project << 'PROJECT_EOF'
#!/bin/bash
# Setup UV project with data generation capabilities

set -e

# Function to print timestamped messages
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*"
}

# Function to setup UV project for user
setup_uv_project() {
    local username=$1
    local project_name=$2
    
    log "Setting up UV project for $username..."
    
    # Create project directory structure
    mkdir -p "/home/$username/$project_name"
    mkdir -p "/home/$username/$project_name/data"
    mkdir -p "/home/$username/$project_name/src"
    mkdir -p "/home/$username/$project_name/tests"
    
    # Fix ownership of created directories
    chown -R "$username:$username" "/home/$username/$project_name"
    
    cd "/home/$username/$project_name"
    
    # Create pyproject.toml for UV project
    sudo -u "$username" cat > pyproject.toml << 'PYPROJECT_EOF'
[project]
name = "demo-project"
version = "0.1.0"
description = "Demo project for data generation and analysis"
requires-python = ">=3.13"
dependencies = [
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "faker>=18.0.0",
    "dvc>=3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "jupyter>=1.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
PYPROJECT_EOF
    
    # Create data generation script
    sudo -u "$username" cat > src/data_generator.py << 'SCRIPT_EOF'
#!/usr/bin/env python3
"""
Data generation script for creating large CSV files with random data.
"""

import pandas as pd
import numpy as np
from faker import Faker
import random
from datetime import datetime, timedelta
import argparse
import os

# Initialize Faker
fake = Faker()

def generate_customer_data(num_records=5000):
    """
    Generate a dataset with customer information.
    
    Args:
        num_records (int): Number of records to generate (default: 5000)
    
    Returns:
        pd.DataFrame: Generated customer data
    """
    print(f"Generating {num_records} customer records...")
    
    data = []
    start_date = datetime.now() - timedelta(days=365*2)
    
    for i in range(num_records):
        record = {
            'customer_id': f'CUST_{i+1:06d}',
            'first_name': fake.first_name(),
            'last_name': fake.last_name(),
            'email': fake.email(),
            'phone': fake.phone_number(),
            'address': fake.street_address(),
            'city': fake.city(),
            'state': fake.state(),
            'zip_code': fake.zipcode(),
            'country': fake.country(),
            'age': random.randint(18, 80),
            'gender': random.choice(['Male', 'Female', 'Other']),
            'income': round(random.uniform(25000, 200000), 2),
            'credit_score': random.randint(300, 850),
            'registration_date': fake.date_between(start_date=start_date),
            'last_purchase_date': fake.date_between(start_date=start_date),
            'total_purchases': random.randint(0, 1000),
            'avg_purchase_amount': round(random.uniform(10, 500), 2),
            'preferred_category': random.choice(['Electronics', 'Clothing', 'Food', 'Books', 'Sports', 'Home']),
            'loyalty_member': random.choice([True, False]),
            'newsletter_subscribed': random.choice([True, False]),
        }
        data.append(record)
        
        # Progress indicator
        if (i + 1) % 1000 == 0:
            print(f"Generated {i + 1} records...")
    
    return pd.DataFrame(data)

def generate_sales_data(num_records=5000):
    """
    Generate a dataset with sales transaction information.
    
    Args:
        num_records (int): Number of records to generate (default: 5000)
    
    Returns:
        pd.DataFrame: Generated sales data
    """
    print(f"Generating {num_records} sales records...")
    
    data = []
    products = ['Laptop', 'Phone', 'Tablet', 'Headphones', 'Mouse', 'Keyboard', 'Monitor', 'Camera', 'Speaker', 'Watch']
    
    for i in range(num_records):
        record = {
            'transaction_id': f'TXN_{i+1:08d}',
            'customer_id': f'CUST_{random.randint(1, 5000):06d}',
            'product_name': random.choice(products),
            'quantity': random.randint(1, 10),
            'unit_price': round(random.uniform(10, 1000), 2),
            'total_amount': 0,  # Will be calculated
            'discount_percent': round(random.uniform(0, 30), 2),
            'tax_amount': 0,  # Will be calculated
            'final_amount': 0,  # Will be calculated
            'payment_method': random.choice(['Credit Card', 'Debit Card', 'Cash', 'PayPal', 'Bank Transfer']),
            'store_location': fake.city(),
            'sales_rep': fake.name(),
            'transaction_date': fake.date_time_between(start_date='-2y', end_date='now'),
            'customer_rating': random.randint(1, 5),
            'return_flag': random.choice([True, False]),
        }
        
        # Calculate derived fields
        record['total_amount'] = record['quantity'] * record['unit_price']
        record['discount_amount'] = record['total_amount'] * (record['discount_percent'] / 100)
        record['tax_amount'] = (record['total_amount'] - record['discount_amount']) * 0.08  # 8% tax
        record['final_amount'] = record['total_amount'] - record['discount_amount'] + record['tax_amount']
        
        # Round monetary values
        for field in ['total_amount', 'discount_amount', 'tax_amount', 'final_amount']:
            record[field] = round(record[field], 2)
        
        data.append(record)
        
        # Progress indicator
        if (i + 1) % 1000 == 0:
            print(f"Generated {i + 1} records...")
    
    return pd.DataFrame(data)

def save_dataset(df, filename, output_dir='data'):
    """
    Save dataset to CSV file.
    
    Args:
        df (pd.DataFrame): DataFrame to save
        filename (str): Output filename
        output_dir (str): Output directory
    """
    os.makedirs(output_dir, exist_ok=True)
    filepath = os.path.join(output_dir, filename)
    
    print(f"Saving dataset to {filepath}...")
    df.to_csv(filepath, index=False)
    
    # Display dataset info
    print(f"Dataset saved successfully!")
    print(f"Shape: {df.shape}")
    print(f"Size: {os.path.getsize(filepath) / (1024*1024):.2f} MB")
    print(f"Columns: {list(df.columns)}")
    
    return filepath

def main():
    """Main function to generate datasets."""
    parser = argparse.ArgumentParser(description='Generate demo datasets')
    parser.add_argument('--records', type=int, default=5000, 
                       help='Number of records to generate (default: 5000)')
    parser.add_argument('--dataset', type=str, default='all',
                       choices=['customers', 'sales', 'all'],
                       help='Dataset to generate (default: all)')
    parser.add_argument('--output-dir', type=str, default='data',
                       help='Output directory (default: data)')
    
    args = parser.parse_args()
    
    print("=== Data Generation Script ===")
    print(f"Records: {args.records}")
    print(f"Dataset: {args.dataset}")
    print(f"Output Directory: {args.output_dir}")
    print()
    
    generated_files = []
    
    if args.dataset in ['customers', 'all']:
        print("Generating Customer Dataset...")
        customer_df = generate_customer_data(args.records)
        customer_file = save_dataset(customer_df, 'customers.csv', args.output_dir)
        generated_files.append(customer_file)
        print()
    
    if args.dataset in ['sales', 'all']:
        print("Generating Sales Dataset...")
        sales_df = generate_sales_data(args.records)
        sales_file = save_dataset(sales_df, 'sales.csv', args.output_dir)
        generated_files.append(sales_file)
        print()
    
    print("=== Generation Complete ===")
    print(f"Generated files: {generated_files}")
    
    # Display sample data
    if args.dataset in ['customers', 'all']:
        print("\nSample Customer Data:")
        print(customer_df.head().to_string())
    
    if args.dataset in ['sales', 'all']:
        print("\nSample Sales Data:")
        print(sales_df.head().to_string())

if __name__ == "__main__":
    main()
SCRIPT_EOF
    
    # Fix file ownership and make script executable
    chown "$username:$username" src/data_generator.py
    sudo -u "$username" chmod +x src/data_generator.py
    
    # Create requirements.txt for compatibility
    sudo -u "$username" cat > requirements.txt << 'REQ_EOF'
pandas>=2.0.0
numpy>=1.24.0
faker>=18.0.0
dvc>=3.0.0
REQ_EOF
    
    # Create README for the project
    sudo -u "$username" cat > README.md << 'README_EOF'
# Demo Project

This is a demo project showcasing data generation and analysis capabilities.

## Project Structure

```
demo-project/
├── pyproject.toml          # UV project configuration
├── requirements.txt        # Pip requirements (for compatibility)
├── src/
│   └── data_generator.py   # Data generation script
├── data/                   # Data directory
├── tests/                  # Test directory
└── README.md              # This file
```

## Data Generation

The project includes a powerful data generation script that can create large CSV files with realistic random data.

### Usage

```bash
# Generate default 5K records for both datasets
python src/data_generator.py

# Generate custom number of records
python src/data_generator.py --records 10000

# Generate specific dataset
python src/data_generator.py --dataset customers

# Custom output directory
python src/data_generator.py --output-dir /path/to/data
```

### Available Datasets

1. **Customer Data** (`customers.csv`)
   - Customer demographics and information
   - Fields: customer_id, name, email, address, age, income, etc.

2. **Sales Data** (`sales.csv`)
   - Sales transaction information
   - Fields: transaction_id, customer_id, product, amount, etc.

### Features

- **Realistic Data**: Uses Faker library to generate realistic-looking data
- **Large Scale**: Can generate 5K+ records efficiently
- **Multiple Datasets**: Customer and sales data with relationships
- **Progress Tracking**: Shows progress during generation
- **File Size Info**: Reports file sizes and dataset statistics
- **Flexible**: Command-line interface for customization

## Integration with DVC

This project is integrated with DVC for data version control and tracking.
README_EOF
    
    # Initialize Git and DVC (basic setup, will be configured for dev server later)
    cd "/home/$username/$project_name"
    if [ ! -d ".git" ]; then
        echo "Initializing Git repository for $username..."
        sudo -u "$username" git init
        sudo -u "$username" git add .
        sudo -u "$username" git commit -m "Initial project setup" || true
    fi

    # Note: DVC will be configured later by the dev setup script
    
    log "✓ UV project setup complete for $username"
}

# Setup UV projects for users
if [ "$CONTAINER_NAME" = "client_a" ]; then
    setup_uv_project "alice" "demo-project"
    setup_uv_project "bob" "data-analysis"
fi

if [ "$CONTAINER_NAME" = "client_b" ]; then
    setup_uv_project "cindy" "ml-experiment"
fi

if [ "$CONTAINER_NAME" = "test_client" ]; then
    setup_uv_project "alice" "demo-project"
    setup_uv_project "bob" "data-analysis"
fi

log "UV project setup complete!"
PROJECT_EOF

RUN chmod +x /usr/local/bin/setup-uv-project

# Create custom entrypoint script
RUN cat > /entrypoint.sh << 'ENTRYPOINT_EOF'
#!/bin/bash
# Custom entrypoint script for test client containers

set -e

# Function to print timestamped messages
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*"
}

# Check if setup has already been completed
SETUP_MARKER="/tmp/client-setup-complete"
if [ -f "$SETUP_MARKER" ]; then
    log "Client setup already completed. Skipping setup..."
else
    log "Running client setup..."
    
    # Setup users based on container type using enhanced script
    export CONTAINER_NAME=${CONTAINER_NAME:-test_client}
    setup-users-enhanced
    
    # Setup UV projects with data generation
    setup-uv-project
    
    # Mark setup as complete
    touch "$SETUP_MARKER"
    log "Client setup completed successfully!"
fi

# SSH service disabled for demo - containers work without SSH
log "SSH service disabled for demo"
log "UV projects with data generation capabilities ready!"
log "Test client container ready for development server testing!"

# Keep container running for demo
log "Starting container and keeping it alive..."
tail -f /dev/null
ENTRYPOINT_EOF

RUN chmod +x /entrypoint.sh

# Expose SSH port
EXPOSE 22

# Set entrypoint
ENTRYPOINT ["/entrypoint.sh"]
CMD ["bash"]
